// SPDX-FileCopyrightText: 2024 Foundation Devices, Inc. <hello@foundationdevices.com>
// SPDX-License-Identifier: GPL-3.0-or-later

use crate::consts::{ATT_MTU, DEVICE_NAME, SERVICES_LIST, SHORT_NAME};
use crate::nus::{self, *};
use crate::TX_BT_VEC;
use crate::{BT_STATE, RSSI_VALUE};
use core::mem;
use defmt::{info, *};
use embassy_time::{Duration, Timer};
use futures::future::{select, Either};
use futures::pin_mut;
use nrf_softdevice::ble::advertisement_builder::{
    ExtendedAdvertisementBuilder, ExtendedAdvertisementPayload, Flag, ServiceList,
};
use nrf_softdevice::ble::gatt_server::notify_value;
use nrf_softdevice::ble::peripheral;
use nrf_softdevice::ble::{gatt_server, Connection, DisconnectedError};
use nrf_softdevice::gatt_server;
use nrf_softdevice::{raw, Softdevice};

#[gatt_server]
pub struct Server {
    nus: Nus,
}

pub async fn stop_bluetooth() {
    info!("Waiting off");
    let _state = BT_STATE.wait().await;
    info!("off");
}

pub fn initialize_sd() -> &'static mut Softdevice {
    let config = nrf_softdevice::Config {
        clock: Some(raw::nrf_clock_lf_cfg_t {
            source: raw::NRF_CLOCK_LF_SRC_RC as u8,
            rc_ctiv: 16,
            rc_temp_ctiv: 2,
            accuracy: raw::NRF_CLOCK_LF_ACCURACY_500_PPM as u8,
        }),
        conn_gap: Some(raw::ble_gap_conn_cfg_t {
            conn_count: 1,
            event_length: 24,
        }),
        conn_gatt: Some(raw::ble_gatt_conn_cfg_t {
            att_mtu: ATT_MTU as u16,
        }),
        gatts_attr_tab_size: Some(raw::ble_gatts_cfg_attr_tab_size_t {
            attr_tab_size: raw::BLE_GATTS_ATTR_TAB_SIZE_DEFAULT,
        }),
        gap_role_count: Some(raw::ble_gap_cfg_role_count_t {
            adv_set_count: 1,
            periph_role_count: 1,
        }),
        gap_device_name: Some(raw::ble_gap_cfg_device_name_t {
            p_value: DEVICE_NAME.as_ptr() as _,
            current_len: DEVICE_NAME.len() as u16,
            max_len: DEVICE_NAME.len() as u16,
            write_perm: unsafe { mem::zeroed() },
            _bitfield_1: raw::ble_gap_cfg_device_name_t::new_bitfield_1(
                raw::BLE_GATTS_VLOC_STACK as u8,
            ),
        }),
        ..Default::default()
    };

    Softdevice::enable(&config)
}

/// Notifies the connected client about new data.
async fn notify_data_tx<'a>(server: &'a Server, connection: &'a Connection) {
    loop {
        // info!("Getting RSSI - tick 1S");
        // info!("RSSI {}db", connection.rssi());
        if connection.rssi().is_some() {
            // Get as u8 rssi - receiver side will take care of cast to i8
            let rssi_as_u8 = connection.rssi().unwrap() as u8;
            let mut rssi_val = RSSI_VALUE.lock().await;
            *rssi_val = rssi_as_u8;
        }

        // This is the way we can notify data when NUS service is up
        {
            let mut buffer = TX_BT_VEC.lock().await;
            if buffer.len() > 0 {
                let _ = notify_value(&connection, server.nus.get_handle(), &buffer[0]);
                buffer.swap_remove(0);
            }
        }

        // Sleep for one second.
        Timer::after(Duration::from_secs(1)).await
    }
}

pub async fn run_bluetooth(sd: &'static Softdevice, server: &Server) {
    static ADV_DATA: ExtendedAdvertisementPayload = ExtendedAdvertisementBuilder::new()
        .flags(&[Flag::GeneralDiscovery, Flag::LE_Only])
        .services_128(ServiceList::Complete, &SERVICES_LIST)
        .short_name(SHORT_NAME)
        .build();

    static SCAN_DATA: ExtendedAdvertisementPayload = ExtendedAdvertisementBuilder::new()
        .full_name(DEVICE_NAME)
        .build();

    let adv = peripheral::ConnectableAdvertisement::ScannableUndirected {
        adv_data: &ADV_DATA,
        scan_data: &SCAN_DATA,
    };

    loop {
        let config = peripheral::Config {
            interval: 50,
            ..Default::default()
        };

        let conn = unwrap!(peripheral::advertise_connectable(sd, adv, &config).await);

        info!("advertising done!");
        // Start rssi capture
        let _ = conn.start_rssi();
        // Activate notification on handle of nus TX
        server.nus.handle(NusEvent::TxCccdWrite {
            notifications: true,
        });

        let gatt_fut = gatt_server::run(&conn, server, |e| server.handle_event(e));
        let tx_fut = notify_data_tx(&server, &conn);

        // Pin mutable futures
        pin_mut!(tx_fut);
        pin_mut!(gatt_fut);

        // We are using "select" to wait for either one of the futures to complete.
        // There are some advantages to this approach:
        //  - we only send data when a client is connected.
        //  - when the GATT server finishes operating, our ADC future is also automatically aborted.
        // Event enums (ServerEvent's) are generated by nrf_softdevice::gatt_server
        // proc macro when applied to the Server struct above
        // server.run(&conn, &config).await;
        // Turn on message on bt
        //server.handle_event(ServerEvent::Nus(NusEvent::TxCccdWrite { notifications: true }));
        let _ = match select(tx_fut, gatt_fut).await {
            Either::Left((_, _)) => {
                info!("Tx error")
            }
            Either::Right((e, _)) => {
                info!("gatt_server run exited with error: {:?}", e);
            }
        };
        // Force false
        BT_STATE.signal(false);
    }
}

impl Server {
    fn handle_event(&self, event: ServerEvent) {
        match event {
            ServerEvent::Nus(e) => self.nus.handle(e),
        }
    }
}
